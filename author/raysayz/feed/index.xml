<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>raysayz &#8211; Ray Sayz</title>
	<atom:link href="http://localhost/author/raysayz/feed/?simply_static_page=7323" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Nowhere, everywhere ... now</description>
	<lastBuildDate>Thu, 23 May 2024 12:31:05 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.4</generator>

<image>
	<url>/wp-content/uploads/2023/11/cropped-raysayz-32x32.png</url>
	<title>raysayz &#8211; Ray Sayz</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Installing Unity Hub on PopOs 22.04 LTS</title>
		<link>/installing-unity-hub-on-popos-22-04-lts/</link>
		
		<dc:creator><![CDATA[raysayz]]></dc:creator>
		<pubDate>Wed, 15 May 2024 04:48:28 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=206</guid>

					<description><![CDATA[Based on various links mentioned below here is my guide to starting Unity Hub on PopOs 22.04 You have to install ssl 1 via First thing is official guide Debian or Ubuntu To install the Unity Hub on a Debian&#8230; ]]></description>
										<content:encoded><![CDATA[
<p>Based on various links mentioned below here is my guide to starting Unity Hub on PopOs 22.04</p>



<p>You have to  install ssl 1 via</p>



<pre class="wp-block-code"><code>sudo dpkg -i &lt;downloaded deb file&gt;</code></pre>



<div class="wp-block-file"><a id="wp-block-file--media-ffb33b69-de3e-498e-b1d7-5c074c7e63a9" href="/wp-content/uploads/2024/05/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb">libssl1.1_1.1.1f-1ubuntu2.22_amd64</a><a href="/wp-content/uploads/2024/05/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb" class="wp-block-file__button wp-element-button" download aria-describedby="wp-block-file--media-ffb33b69-de3e-498e-b1d7-5c074c7e63a9">Download</a></div>



<p></p>



<p>First thing is official guide</p>



<h4 class="wp-block-heading" id="debian-or-ubuntu">Debian or Ubuntu</h4>



<p>To install the Unity Hub on a Debian or Ubuntu Linux distribution, you need to add the Unity Hub Debian repository along with the public signing key to verify the integrity of the packages.</p>



<ol>
<li>To add the public signing key, run the following command:<code>$ wget -qO - https://hub.unity3d.com/linux/keys/public | gpg --dearmor | sudo tee /usr/share/keyrings/Unity_Technologies_ApS.gpg > /dev/null</code></li>



<li>To add the Unity Hub repository, you need an entry in <code>/etc/apt/sources.list.d</code>. Run the following command to add the Unity Hub repository:<code>$ sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/Unity_Technologies_ApS.gpg] https://hub.unity3d.com/linux/repos/deb stable main" > /etc/apt/sources.list.d/unityhub.list'</code></li>



<li>Update the package cache and install the package:<code>$ sudo apt update $ sudo apt-get install unityhub</code></li>
</ol>



<p>**Note: For some systems, you may need to ensure the following:</p>



<ul>
<li>The directory <code>/usr/share/keyrings</code> exists.</li>



<li>The user or group installing the Hub has write permissions to the <code>/usr/share/keyrings</code> directory.</li>



<li>The user or group installing Hub has at least read permissions to the resulting file <code>Unity_Technologies_ApS.gpg</code>.**</li>
</ul>



<p>To remove the Unity Hub from the system, run the following command:</p>



<pre class="wp-block-code"><code>$ sudo apt-get remove unityhub

</code></pre>



<p>Now we have to start in a special way so you can set the unity temp folder</p>



<pre class="wp-block-code"><code>#!/bin/bash

TMPDIR=/home/surajitray/Development/unitytemp /opt/unityhub/unityhub %U
</code></pre>



<p>Links</p>



<p><a href="https://docs.unity3d.com/hub/manual/InstallHub.html#install-hub-linux">https://docs.unity3d.com/hub/manual/InstallHub.html#install-hub-linux</a></p>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Disable keyboard touch pad in Pop!</title>
		<link>/disable-keyboard-touch-pad-in-pop/</link>
		
		<dc:creator><![CDATA[raysayz]]></dc:creator>
		<pubDate>Tue, 12 Dec 2023 08:50:08 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=175</guid>

					<description><![CDATA[In the case of convertible laptops the keyboard and touchpad needs to be disabled if the laptop screen is being used as a tablet and you dont want accidental keypresses. This happens automatically on windows but linux and Pop! does&#8230; ]]></description>
										<content:encoded><![CDATA[
<p>In the case of convertible laptops the keyboard and touchpad needs to be disabled if the laptop screen is being used as a tablet and you dont want accidental keypresses. This happens automatically on windows but linux and Pop! does not detect the switch which allows it to know that the laptop os being flipped. Some laptops show up this key , some dont.</p>



<pre class="wp-block-code"><code>ray@pop-os:~/TabletButton$ xinput list 
<strong>⎡ Virtual core pointer                    	id=2	</strong>&#91;master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer              	id=4	&#91;slave  pointer  (2)]
⎜   ↳ Asus Keyboard                           	id=9	&#91;slave  pointer  (2)]
⎜   ↳ Asus Keyboard                           	id=11	&#91;slave  pointer  (2)]
⎜   ↳ ELAN9008:00 04F3:2FC2                   	id=12	&#91;slave  pointer  (2)]
⎜   ↳ ASUE120D:00 04F3:31FB Mouse             	id=14	&#91;slave  pointer  (2)]
<strong>⎜   ↳ ASUE120D:00 04F3:31FB Touchpad          	id=15	&#91;slave  pointer  (2)]</strong>
⎜   ↳ input-remapper Asus Keyboard forwarded  	id=20	&#91;slave  pointer  (2)]
⎜   ↳ ERGO M575 Mouse                         	id=22	&#91;slave  pointer  (2)]
⎜   ↳ input-remapper ERGO M575 Mouse forwarded	id=23	&#91;slave  pointer  (2)]
⎣ <strong>Virtual core keyboard                   	id=3</strong>	&#91;master keyboard (2)]
    ↳ Virtual core XTEST keyboard             	id=5	&#91;slave  keyboard (3)]
    ↳ Video Bus                               	id=6	&#91;slave  keyboard (3)]
    ↳ Power Button                            	id=7	&#91;slave  keyboard (3)]
    ↳ Sleep Button                            	id=8	&#91;slave  keyboard (3)]
    ↳ Asus Keyboard                           	id=10	&#91;slave  keyboard (3)]
    ↳ ELAN9008:00 04F3:2FC2 Stylus            	id=13	&#91;slave  keyboard (3)]
    ↳ Asus WMI hotkeys                        	id=16	&#91;slave  keyboard (3)]
    ↳ Asus Keyboard                           	id=17	&#91;slave  keyboard (3)]
<strong>    ↳ input-remapper keyboard                 	id=18	&#91;slave  keyboard (3)]
    ↳ input-remapper Asus Keyboard forwarded  	id=19	&#91;slave  keyboard (3)]
    ↳ input-remapper Asus Keyboard forwarded</strong>  	<strong>id=21	&#91;slave  keyboard (3)]</strong></code></pre>



<p>We can find the correct input type by disconnecting and connecting. If you are successful and the keyboard is disabled you need an external usb keyboard to start typing to reattach. So its best to use the below script to experiment which finishes in a certain time and you regain keyboard.</p>



<pre class="wp-block-code"><code>#!/bin/bash

#to disconnect by id
#disconnect special key
xinput float 18
#disconnect main keyboard
xinput float 19
#disconnect special key
xinput float 21
#disconnect touch pad
xinput float 15

sleep 10s # Waits 10 seconds. 
#Check if your keyboard and touchpad is disabled

#to reconnecct by id to parent
xinput reattach 18 3
xinput reattach 19 3
xinput reattach 21 3
xinput reattach 15 2</code></pre>



<p>Create a Gnome Panel applet to do the same. We need a dependency for this</p>



<pre class="wp-block-code"><code>sudo apt-get install gir1.2-appindicator3-0.1 </code></pre>



<p>Now the script</p>



<pre class="wp-block-code"><code>#!/usr/bin/python3

# This code is an example for a tutorial on Ubuntu Unity/Gnome AppIndicators:
# http://candidtim.github.io/appindicator/2014/09/13/ubuntu-appindicator-step-by-step.html
# https://gist.github.com/candidtim/7290a1ad6e465d680b68

import os
import signal
import json
import subprocess

import gi
gi.require_version('Gtk', '3.0') 
from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Notify as notify



APPINDICATOR_ID = 'tabletmodeindicator'

def main():
    indicator = appindicator.Indicator.new(APPINDICATOR_ID, os.path.abspath('<strong>/home/surajitray/TabletButton/tablet.svg</strong>'), appindicator.IndicatorCategory.SYSTEM_SERVICES)
    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(build_menu())
    notify.init(APPINDICATOR_ID)
    gtk.main()

def build_menu():
    menu = gtk.Menu()

    item_tbmode = gtk.MenuItem('TabletMode')
    item_tbmode.connect('activate', tbmode)
    menu.append(item_tbmode)


    item_lpmode = gtk.MenuItem('LaptopMode')
    item_lpmode.connect('activate', lpmode)
    menu.append(item_lpmode)

    item_quit = gtk.MenuItem('Quit')
    item_quit.connect('activate', quit)
    menu.append(item_quit)

    menu.show_all()
    return menu

def tbmode(_):
    subprocess.call("<strong>/home/surajitray/<strong>TabletButton</strong></strong>/<strong>keyboardtouchpaddisable.sh</strong>", shell=True)
    return tbmode

def lpmode(_):
    subprocess.call("<strong>/home/surajitray/<strong>TabletButton</strong></strong>/<strong>keyboardtouchpadenable.sh</strong>", shell=True)
    return lpmode

def quit1(_):
    notify.uninit()
    gtk.main_quit()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    main()</code></pre>



<p>The scripts are below</p>



<p><strong>keyboardtouchpaddisable.sh</strong></p>



<pre class="wp-block-code"><code>#!/bin/bash

xinput float 18
xinput float 19
xinput float 21
xinput float 15</code></pre>



<p><strong>keyboardtouchpaddisable.sh</strong></p>



<pre class="wp-block-code"><code>#!/bin/bash

xinput reattach 18 3
xinput reattach 19 3
xinput reattach 21 3
xinput reattach 15 2</code></pre>



<p>You can use any svg for the image : <strong>/home/surajitray/TabletButton/tablet.svg</strong>, just make sure the image and path are correct. Now you can put this item in the startup applications</p>



<p></p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="717" src="/wp-content/uploads/2023/12/image-1024x717.png" alt="" class="wp-image-178" srcset="/wp-content/uploads/2023/12/image-1024x717.png 1024w, /wp-content/uploads/2023/12/image-300x210.png 300w, /wp-content/uploads/2023/12/image-768x538.png 768w, /wp-content/uploads/2023/12/image-1536x1075.png 1536w, /wp-content/uploads/2023/12/image.png 2024w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>WordPress Tip 101</title>
		<link>/wordpress-tip-101/</link>
		
		<dc:creator><![CDATA[raysayz]]></dc:creator>
		<pubDate>Wed, 29 Nov 2023 09:12:43 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=41</guid>

					<description><![CDATA[Unhooking a Function from the Parent Theme If the function from the parent theme isn’t pluggable, you can still prevent it from running. Imagine your parent theme has a function called parent_function(), which is hooked to the init hook with&#8230; ]]></description>
										<content:encoded><![CDATA[
<h4 class="wp-block-heading" id="unhooking-a-function-from-the-parent-theme">Unhooking a Function from the Parent Theme<a class="anchor-hash" href="#unhooking-a-function-from-the-parent-theme" aria-hidden="true"></a></h4>



<p>If the function from the parent theme isn’t pluggable, you can still prevent it from running. Imagine your parent theme has a function called <code>parent_function()</code>, which is hooked to the <code>init</code> hook with a priority of <code>20</code>. You want to prevent it from running so you can replace it with a function of your own.</p>



<p>Here’s what the parent theme function might look like:</p>



<pre class="wp-block-code"><code><span class="token keyword">function</span> <span class="token function-definition function">parent_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//contents of function here</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> ‘init’<span class="token punctuation">,</span> ‘parent_function’<span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p>To unhook it, you’d code this in your child theme:</p>



<pre class="wp-block-code"><code><span class="token keyword">function</span> <span class="token function-definition function">remove_parent_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token function">remove_action</span><span class="token punctuation">(</span> ‘init’<span class="token punctuation">,</span> ‘parent_function’<span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> ‘wp_head’<span class="token punctuation">,</span> ‘remove_parent_function’ <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p>Note that you hook your second function to the wp_head hook which is run at the top of each page, and that you have to include the same value for the priority parameter as in the original function. If the original <code>add_action()</code> function didn’t have a priority, you can omit that from your child theme’s <code>remove_action()</code> function.</p>



<p><em>Note: If the original function was hooked to a filter hook instead of an action hook, you would use <code>remove_filter()</code> in the same way.</em></p>



<h4 class="wp-block-heading" id="augmenting-a-function-with-another-function">Augmenting a Function With Another Function<a class="anchor-hash" href="#augmenting-a-function-with-another-function" aria-hidden="true"></a></h4>



<p>Instead of overriding or removing a function, sometimes you might want to add to it instead. In this case, you’d write a new function with a different name, and attach it to the same hook.</p>



<p>Let’s imagine there is an action hook for the footer in your parent theme called <code>parent_footer</code>. Any function you attach to that hook will run in the place where the hook is situated.</p>



<p>In the parent theme, there’s already a function called <code>parent_footer_content()</code> that populates the footer. But what if you wanted to add some extra code to it?</p>



<p>Here’s what the <code>parent_footer_content()</code> function might look like in the parent theme:</p>



<pre class="wp-block-code"><code><span class="token keyword">function</span> <span class="token function-definition function">parent_footer_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// content of function here</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> ‘parent_footer’<span class="token punctuation">,</span> ‘parent_footer_content’ <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p>Now if you wanted to add additional content after that, you would create a function in your child theme, hooked to the same action hook, with a priority that meant it run after the first function. As the priority isn’t set for the parent theme’s function, it defaults to 10. So you need to use a higher number so it fires after that.</p>



<pre class="wp-block-code"><code><span class="token keyword">function</span> <span class="token function-definition function">child_footer_extra_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// contents of function here</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span> ‘parent_footer’<span class="token punctuation">,</span> ‘child_footer_extra_content’<span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p>This would add the code from your child theme’s function after the code from your parent theme’s function.</p>



<h2 class="wp-block-heading">An Example</h2>



<p> This is a snippet I used to get rid of the footer in the Attitude theme</p>



<pre class="wp-block-code"><code>
add_action( 'wp_head', 'remove_attitude_footer' );

function remove_attitude_footer() {
 remove_action( 'attitude_footer', 'attitude_footer_info', 30 );
}</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
